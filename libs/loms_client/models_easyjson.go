// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package loms_client

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient(in *jlexer.Lexer, out *StocksResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stocks":
			if in.IsNull() {
				in.Skip()
				out.Stocks = nil
			} else {
				in.Delim('[')
				if out.Stocks == nil {
					if !in.IsDelim(']') {
						out.Stocks = make([]Stock, 0, 4)
					} else {
						out.Stocks = []Stock{}
					}
				} else {
					out.Stocks = (out.Stocks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Stock
					(v1).UnmarshalEasyJSON(in)
					out.Stocks = append(out.Stocks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient(out *jwriter.Writer, in StocksResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stocks\":"
		out.RawString(prefix[1:])
		if in.Stocks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Stocks {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StocksResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StocksResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StocksResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StocksResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient1(in *jlexer.Lexer, out *StocksRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SKU":
			out.SKU = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient1(out *jwriter.Writer, in StocksRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SKU\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.SKU))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StocksRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StocksRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StocksRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StocksRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient1(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient2(in *jlexer.Lexer, out *Stock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "warehouseID":
			out.WarehouseID = int64(in.Int64())
		case "count":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient2(out *jwriter.Writer, in Stock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"warehouseID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.WarehouseID))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient2(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient3(in *jlexer.Lexer, out *OrderPaidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient3(out *jwriter.Writer, in OrderPaidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderPaidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderPaidResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderPaidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderPaidResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient3(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient4(in *jlexer.Lexer, out *OrderPaidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderID":
			out.OrderID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient4(out *jwriter.Writer, in OrderPaidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderPaidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderPaidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderPaidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderPaidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient4(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient5(in *jlexer.Lexer, out *OrderItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sku":
			out.SKU = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient5(out *jwriter.Writer, in OrderItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sku\":"
		out.RawString(prefix[1:])
		out.Int(int(in.SKU))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient5(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient6(in *jlexer.Lexer, out *ListOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = OrderStatus(in.String())
		case "user":
			out.UserID = int64(in.Int64())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.OrderItems = nil
			} else {
				in.Delim('[')
				if out.OrderItems == nil {
					if !in.IsDelim(']') {
						out.OrderItems = make([]OrderItem, 0, 4)
					} else {
						out.OrderItems = []OrderItem{}
					}
				} else {
					out.OrderItems = (out.OrderItems)[:0]
				}
				for !in.IsDelim(']') {
					var v4 OrderItem
					(v4).UnmarshalEasyJSON(in)
					out.OrderItems = append(out.OrderItems, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient6(out *jwriter.Writer, in ListOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.OrderItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.OrderItems {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient6(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient7(in *jlexer.Lexer, out *ListOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderID":
			out.ID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient7(out *jwriter.Writer, in ListOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient7(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient8(in *jlexer.Lexer, out *CreateOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderID":
			out.OrderID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient8(out *jwriter.Writer, in CreateOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient8(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient9(in *jlexer.Lexer, out *CreateOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.UserID = int(in.Int())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.OrderItems = nil
			} else {
				in.Delim('[')
				if out.OrderItems == nil {
					if !in.IsDelim(']') {
						out.OrderItems = make([]OrderItem, 0, 4)
					} else {
						out.OrderItems = []OrderItem{}
					}
				} else {
					out.OrderItems = (out.OrderItems)[:0]
				}
				for !in.IsDelim(']') {
					var v7 OrderItem
					(v7).UnmarshalEasyJSON(in)
					out.OrderItems = append(out.OrderItems, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient9(out *jwriter.Writer, in CreateOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.OrderItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.OrderItems {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient9(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient10(in *jlexer.Lexer, out *CancelOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient10(out *jwriter.Writer, in CancelOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient10(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient11(in *jlexer.Lexer, out *CancelOrderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderID":
			out.OrderID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient11(out *jwriter.Writer, in CancelOrderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsLomsClient11(l, v)
}
