// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package product_service_client

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient(in *jlexer.Lexer, out *ListSKUsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "skus":
			if in.IsNull() {
				in.Skip()
				out.SKUs = nil
			} else {
				in.Delim('[')
				if out.SKUs == nil {
					if !in.IsDelim(']') {
						out.SKUs = make([]uint32, 0, 16)
					} else {
						out.SKUs = []uint32{}
					}
				} else {
					out.SKUs = (out.SKUs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 uint32
					v1 = uint32(in.Uint32())
					out.SKUs = append(out.SKUs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient(out *jwriter.Writer, in ListSKUsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"skus\":"
		out.RawString(prefix[1:])
		if in.SKUs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.SKUs {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListSKUsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListSKUsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListSKUsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListSKUsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient1(in *jlexer.Lexer, out *ListSKUsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "startAfterSku":
			out.StartAfterSKU = uint32(in.Uint32())
		case "count":
			out.Count = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient1(out *jwriter.Writer, in ListSKUsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"startAfterSku\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.StartAfterSKU))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListSKUsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListSKUsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListSKUsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListSKUsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient1(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient2(in *jlexer.Lexer, out *GetProductResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "price":
			out.Price = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient2(out *jwriter.Writer, in GetProductResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProductResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProductResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProductResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProductResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient2(l, v)
}
func easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient3(in *jlexer.Lexer, out *GetProductRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "sku":
			out.SKU = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient3(out *jwriter.Writer, in GetProductRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"sku\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SKU))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetProductRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetProductRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetProductRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetProductRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGitlabOzonDevAlexeyivashkaHomeworkLibsProductServiceClient3(l, v)
}
